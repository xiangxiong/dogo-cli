#!/usr/bin/env node

const path = require('path');
const download = require('download-git-repo');
const program = require('commander');
const chalk = require('chalk');
const ora = require('ora'); 
const home = require('user-home');
const inquirer = require('inquirer');
const Metalsmith = require('metalsmith');
const rm = require('rimraf').sync;

const options={
  gitHTTP: 'https://gitlab.iwubida.com:wubida/fe-template',
  gitSSH: 'gitlab:gitlab.iwubida.com:wubida/fe-template'
}
program
  .version('1.0.2')
  .description('物必达科技项目构建系统 -- Dogo')
  .usage('<project-name>')
  .on('--help', () => {
    console.log()
    console.log()
    console.log('  Example:')
    console.log()
    console.log(chalk.yellow('    # 创建一个新项目：'))
    console.log('    $ dogo init <my-project>')
    console.log()
    console.log(chalk.yellow('    # 使用SSH的方式创建新项目：'))
    console.log('    $ dogo init -s <my-project>')
    console.log('    $ dogo init --ssh <my-project>')
    console.log()
  });

program
  .command('init')
  .description('创建新的项目')
  .option("-s, --ssh <name>", "使用SSH的方式下载模版")
  .action(function(env, options) {
    if(options || env.ssh){
      startCli();
    }else{
      return program.help();
    }
  });

program
  .command('*')
  .action(function(env){
    return program.help();
  });

// 解析命令行
program.parse(process.argv);
// 没有任何输入 提示help
if(program.args.length < 1){
  return program.help();
}

/**
 * 命令敲对就开始
 */
function startCli(){
  let promps= [];
  promps.push({
    type: 'list',
    name: 'projectType',
    message: '请选择要开发的项目框架：',
    choices: [
      {
        name: 'Vue',
        value: 'vue'
      },
      {
        name: 'React Native',
        value: 'react-naitve'
      },
      {
        name: 'Taro 小程序',
        value: 'taro-applet'
      }
    ]
  })
  promps.push({
    when: function(answers) {
      return answers.projectType === 'vue';
    },
    type: 'list',
    name: 'allvue',
    message: '老板，看下哪个适合你：',
    choices: [
      {
        name: 'H5项目',
        value: 'h5vue'
      },
      {
        name: 'Admin管理平台',
        value: 'adminvue'
      }
    ]
  })

  inquirer.prompt(promps).then(function(answers){
    downloadTpl(answers);
  });
}

/**
 * 下载模版
 * @param promptVal 用户选择的答案
 */
function downloadTpl(promptVal) {
  // 判断是ssh下载方式还是https
  const ssh = program.args[program.args.length-1].ssh;
  // 要创业的项目的名字
  const rawName = ssh ? ssh : program.args[0];
  // 拉取的项目的git地址
  const gitUrl =  ssh ? options.gitSSH : options.gitHTTP;
  // 模板零时存放的路径
  const tmp = path.join(home, rawName);
  // 模板真实存放的路径
  const to = path.resolve(rawName || '.');
  const spinner = ora('模板下载中...');
  spinner.start();
  
  download(gitUrl, tmp, { clone:true }, function (err) {
    spinner.stop();
    generate(promptVal, tmp, to, function(){
      if(err){
        console.log(chalk.red(`项目创建失败: ${err}`));
        process.exit();
      }else{
        console.log(chalk.cyan('##########  物必达科技  ##########'));
        console.log(chalk.cyan('##                              ##'));
        console.log(chalk.cyan('##                              ##'));
        console.log(chalk.cyan('##       项目快速构建系统       ##'));
        console.log(chalk.cyan('##          dogo 稳！           ##'));
        console.log(chalk.cyan('##                              ##'));
        console.log(chalk.cyan('##            ___               ##'));
        console.log(chalk.cyan('##      |     | |               ##'));
        console.log(chalk.cyan('##     / \\    | |               ##'));
        console.log(chalk.cyan('##    |--o|===|-|               ##'));
        console.log(chalk.cyan('##    |--o|===|-|               ##'));
        console.log(chalk.cyan('##    |---|   | |               ##'));
        console.log(chalk.cyan('##   /     \\  |D|               ##'));
        console.log(chalk.cyan('##  | W     | |O|               ##'));
        console.log(chalk.cyan('##  | B     |=|G|               ##'));
        console.log(chalk.cyan('##  | D     | |O|               ##'));
        console.log(chalk.cyan('##  |_______| |_|               ##'));
        console.log(chalk.cyan('##   |@| |@|  | |               ##'));
        console.log(chalk.cyan('##____________|_|_              ##'));
        console.log(chalk.cyan('##                              ##'));
        console.log(chalk.cyan('##################################'));
        console.log(chalk.green('项目创建完成'));
        console.log(chalk.magenta('苦逼赶紧撸码吧!'));
      }
    });
  });
}

/**
 * 处理模版
 * @param promptVal 用户选择的答案
 * @param src 暂存地址
 * @param dest 存储地址
 * @param doneCallback 模版处理结束后的回调
 */
function generate(promptVal, src, dest, doneCallback){
  let projectName = promptVal.projectType;
  if(projectName === 'vue'){
    // 判断是管理系统还是wap系统 (取值是目录的名字)
    projectName = promptVal.allvue === 'h5vue'? 'vue': 'vue-admin';
  }else{
    console.log(promptVal.projectType)
    projectName = promptVal.projectType
    // console.log(chalk.green('项目模板还没写完，敬请期待!'));
    // return ;
  }
  const metalsmith = Metalsmith(path.join(src, projectName));
  metalsmith
    .source('.')
    .destination(dest)
    .build((err, files) => {
      rm(src);
      doneCallback(err);
    })
}